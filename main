

///////////////////////////////////////////////////////////////////
GEE Script to map mangrove structure in Northern Brazil

var crabIsland_countour = ee.FeatureCollection(table).geometry();

Map.addLayer(crabIsland_countour,elevationVis, 'Crab island Shape');
Map.centerObject(crab_island_polygon);   

// Clip PALSAR-2 data to study area 
//var collection = ee.ImageCollection('JAXA/ALOS/PALSAR-2/Level2_2/ScanSAR')
//  .filterBounds(ee.Geometry.Point(143, -5));

//var dataset = ee.ImageCollection('JAXA/ALOS/PALSAR/YEARLY/SAR_EPOCH')
//                  .filter(ee.Filter.date('2017-01-01', '2018-01-01'));
//var sarHh = dataset.select('HH');
//var sarHhVis = {
//  min: 0.0,
//  max: 5000.0,
//};
//var dataset = ee.ImageCollection('JAXA/ALOS/PALSAR/YEARLY/SAR_EPOCH')
//                  .filter(ee.Filter.date('2017-01-01', '2018-01-01'));
//var sarHV = dataset.select('HV');
//var sarHVVis = {
//  min: 0.0,
//  max: 10000.0,
//};
//Map.addLayer(sarHV, sarHVVis, 'SAR HV');
//var sarHV_mean = sarHV.mean();

//var radar_median_2017 = dataset.median();

//var alos_palsar_clip = sarHV_mean.clip(crab_island_polygon);

//Map.addLayer(sarHh, sarHhVis, 'SAR HH');
//Map.addLayer(alos_palsar_clip, sarHVVis, 'Crab Island Radar'); 


// Getting the elevation data, so that I make the mosaic 
var dataset = ee.ImageCollection('JAXA/ALOS/AW3D30/V3_2');
var elevation = dataset.select('DSM');
var elevationVis = {
  min: 0,
  max: 35, // original is 5000
  palette: ['0000ff', '00ffff', 'ffff00', 'ff0000', 'ffffff']
};
//Map.addLayer(elevation, elevationVis, 'Elevation');


// How do I clip my elevation to the study area? 
var elevation_mean = elevation.mean();
var crab_elevation = elevation_mean.clip(crabIsland_countour);
//Map.addLayer(crab_elevation, elevationVis, 'Elevation crab island');



// Use HH for wetland mapping 
// I need to convert to dB, this is how I get the value from the Radar

// Let's follow the Guiana tutorial!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 

/////////////////////// Now, lets' add ALOS/PALSAR mosaics from JAXA. ///////////////////////////////////////////////
//////////// These are produced every year by JAXA. This is L-band data at HV and HH ////

// Try to add more PALSAR data 
var alos_multiple_years = ee.ImageCollection('JAXA/ALOS/PALSAR/YEARLY/SAR')
                  .filter(ee.Filter.date('2007-01-01', '2021-01-01')).select(['HH','HV']).mean();
                  
// To this point, everything is correct! 


var hvhh_multiple_years = alos_multiple_years.expression(   
  '(HV/HH)', {
    'HH': alos_multiple_years.select('HH'),
    'HV': alos_multiple_years.select('HV')
}).rename('HVHH'); // The error is in this code! 

print(hvhh_multiple_years);

// Let's try to do the mosaic after everything! 

var alos_multiple_years = alos_multiple_years.addBands(hvhh_multiple_years); 
print(alos_multiple_years);


// apply: γ₀ = 10log₁₀(DN²) - 83.0 dB
var DN_multiple_years = alos_multiple_years.select('HH');
var HVdB_multiple_years = DN_multiple_years.pow(2).log10().multiply(10).subtract(83);
var HVdB_multiple_years = HVdB_multiple_years.rename(['HV']);  /// naming that band 'HV' for calling later
print(HVdB_multiple_years);

var alosHVVis = {
  min: -20,
  max: -5,
};


var HVdB_multiple_years = HVdB_multiple_years.clip(crabIsland_countour);
print(HVdB_multiple_years);


// var sarHh = alos_multiple_years.select('HH');
// var sarHhVis = {
//   min: 0.0,
//   max: 10000.0,
// };
// Map.addLayer(sarHh, sarHhVis, 'SAR HH');
Map.addLayer(HVdB_multiple_years, alosHVVis, ' PALSAR Multiple years'); 

// Now let's make a stack with elevation data 


var elevation_radar_multiple_years = HVdB_multiple_years.addBands(crab_elevation);
print(elevation_radar_multiple_years);
Map.addLayer(elevation_radar_multiple_years, alosHVVis, 'Crab Island Radar and Elevation Multiple Years');  

////////////////////////////////////// PALSAR data for 2017 /////////////////////////////////////////////////////
var alos = ee.Image('JAXA/ALOS/PALSAR/YEARLY/SAR/2017');

//  compute the HV/HH ratio and add as new Band
var hvhh = alos.expression(
  '(HV/HH)', {
    'HH': alos.select('HH'),
    'HV': alos.select('HV')
}).rename('HVHH');

var alos = alos.addBands(hvhh); 

// apply: γ₀ = 10log₁₀(DN²) - 83.0 dB
var DN = alos.select('HH');
var HVdB = DN.pow(2).log10().multiply(10).subtract(83);
var HVdB = HVdB.rename(['HV']);  /// naming that band 'HV' for calling later


var alosHVVis = {
  min: -20,
  max: -5,
};
HVdB = HVdB.clip(crabIsland_countour);


var elevation_radar = HVdB.addBands(crab_elevation);
print(elevation_radar);
Map.addLayer(elevation_radar, alosHVVis, 'Crab Island Radar and Elevation');  


var vizParams = {
  bands: ['b1', 'b2', 'b2'],
  min: 0,
  max: 0.5,
  gamma: [0.95, 1.1, 1]
};
print(image);

// Map.addLayer(image,vizParams, 'Landsat TCI');


// Try to run Random Forest with this data, and then analysis 

var bands = ['HV', 'DSM'];
var bands_elevation = ['DSM'];
print(elevation_radar);

// 1. Merge my training data
var mygeeclasses = WaterBody.merge(TidalMudflat).merge(FreshwaterSwamp).merge(HypersalineSaltFlat).merge(TropicalSaltMarsh).merge(SupratidalSedgeField).merge(RedMangrove).merge(BlackMangrove);
// My target label 
var label = 'class_id_v2';
// Overlay on the imagery to get training data. That is the value of each band in the variable 'bands'
// Train the classification points
var sample  = elevation_radar_multiple_years.select(bands).sampleRegions({
  collection: mygeeclasses,
 properties: [label],
  scale: 30
});
print(label,sample);

sample = sample.randomColumn();
var trainingSample = sample.filter('random <= 0.7');
var validationSample = sample.filter('random > 0.7');


// Training a Random Forest classifier with the above training data, labels and image bands(will apply Random Forest later). 
var trainedClassifier = ee.Classifier.smileRandomForest(10).train(trainingSample, label, bands);
// Classify the image with the same bands used for traning. 'Trained' is the actual decision tree model and can be applied to the entire image 

// Get information about the trained classifier.
print('Results of trained classifier', trainedClassifier.explain());

// Get a confusion matrix and overall accuracy for the training sample.
var trainAccuracy = trainedClassifier.confusionMatrix();
print('Training error matrix', trainAccuracy);
print('Training overall accuracy', trainAccuracy.accuracy());



// Get a confusion matrix and overall accuracy for the validation sample.
validationSample = validationSample.classify(trainedClassifier);
var validationAccuracy = validationSample.errorMatrix(label, 'classification');
print('Validation error matrix', validationAccuracy);
print('Validation accuracy', validationAccuracy.accuracy());


// Calculate training kappa statistic.
print('Kappa training statistic', trainAccuracy.kappa());

// Calculate kappa statistic.
print('Kappa statistic', validationAccuracy.kappa());



// Classify the reflectance image from the trained classifier.
// var imgClassified = elevation_radar_multiple_years.classify(trainedClassifier);
var imgClassified = elevation_radar_multiple_years.classify(trainedClassifier);

// Add the layers to the map.
var classVis = {
  min: 0,
  max: 7,
  palette: ['2d34b4' ,'bca37a', '00d2d6', 'fbffc9', 'ede11f', '9c572a',
            'd63000', '7b7477']
};

var classVis_v2 = {
  min: 0,
  max: 3,
  palette: ['2d34b4' ,'fbe79f', 'ff3b3b', '464c5e']
};


//Map.addLayer(imgClassified, classVis, 'Classified');
Map.addLayer(imgClassified, classVis_v2, 'Classified');

// Retrieve the projection information from a band of the original image.
// Call getInfo() on the projection to request a client-side object containing
// the crs and transform information needed for the client-side Export function.
var projection = elevation_radar_multiple_years.select('HV').projection().getInfo();

print(projection);

// // Export the Classification Result, specifying the CRS, transform, and region.
// Export.image.toDrive({
//   image: imgClassified,
//   description: 'CrabIsland_Classification_3',
//   crs: projection.crs,
//   crsTransform: projection.transform,
//   region: crab_island_polygon
// });

Export.image.toDrive({ 
  image: imgClassified.multiply(100).round().toInt16(), // <-- scale, cast to 16-bit
  region: imgClassified.geometry(), // <-- use the image geometry as the region to export
  description: 'CrabIsland_Classification_4',
  folder:'AEO_Results',
  fileNamePrefix: 'CrabIsland_Classification_4',
  scale: 30,
  maxPixels: 1e13,  // <-- set to 1e13 - the max
  crs : 'EPSG:4326'
});


